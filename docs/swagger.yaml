definitions:
  enums.UserStatus:
    enum:
    - active
    - inactive
    - banned
    type: string
    x-enum-varnames:
    - UserActive
    - UserInactive
    - UserBanned
  models.Conversation:
    properties:
      createdAt:
        type: string
      groupPhotoPath:
        type: string
      groupPhotoUrl:
        type: string
      id:
        type: string
      isGroup:
        type: boolean
      name:
        type: string
      updatedAt:
        type: string
    type: object
  models.ConversationWithMembers:
    properties:
      conversation:
        $ref: '#/definitions/models.Conversation'
      members:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      dateOfBirth:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        type: string
      id:
        type: string
      isOwner:
        type: boolean
      isStaff:
        type: boolean
      lastName:
        type: string
      lastSeen:
        type: string
      mobileNumber:
        type: string
      password:
        type: string
      profilePhotoPath:
        type: string
      profilePhotoUrl:
        type: string
      status:
        $ref: '#/definitions/enums.UserStatus'
      updatedAt:
        type: string
      username:
        type: string
    type: object
  responses.FailureBody:
    properties:
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
  responses.SuccessBody:
    properties:
      data: {}
      success:
        type: boolean
    type: object
  schemas.LoginSchema:
    properties:
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
      username:
        type: string
    required:
    - password
    type: object
  schemas.RegisterSchema:
    properties:
      date_of_birth:
        description: Keep as string
        type: string
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      gender:
        enum:
        - male
        - female
        - other
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      mobile_number:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
      username:
        type: string
    required:
    - date_of_birth
    - email
    - first_name
    - gender
    - last_name
    - mobile_number
    - password
    - username
    type: object
  schemas.StartConversationSchema:
    properties:
      is_group:
        type: boolean
      members:
        items:
          type: string
        maxItems: 1024
        minItems: 1
        type: array
      name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - members
    type: object
  schemas.UpdateUserSchema:
    properties:
      date_of_birth:
        description: Keep as string
        type: string
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      gender:
        enum:
        - male
        - female
        - other
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      mobile_number:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email/username and password, and returns
        a JWT token
      parameters:
      - description: User login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.LoginSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.FailureBody'
      summary: User login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided details
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schemas.RegisterSchema'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new customer
      tags:
      - Auth
  /conversation:
    post:
      consumes:
      - application/json
      description: Creates a new direct or group chat
      parameters:
      - description: Conversation Data
        in: body
        name: conversation
        required: true
        schema:
          $ref: '#/definitions/schemas.StartConversationSchema'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.SuccessBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.FailureBody'
      security:
      - AuthorizationToken: []
      summary: Start Conversation
      tags:
      - Conversation
  /conversation/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.FailureBody'
      security:
      - AuthorizationToken: []
      summary: Delete Conversation
      tags:
      - Conversation
    get:
      consumes:
      - application/json
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Conversation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.FailureBody'
      security:
      - AuthorizationToken: []
      summary: Get Conversation Details
      tags:
      - Conversation
  /conversation/{id}/member/{user_id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.FailureBody'
      security:
      - AuthorizationToken: []
      summary: Remove Member
      tags:
      - Conversation
    post:
      consumes:
      - application/json
      parameters:
      - description: Conversation ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.FailureBody'
      security:
      - AuthorizationToken: []
      summary: Add Member
      tags:
      - Conversation
  /conversations/member/{user_id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ConversationWithMembers'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.FailureBody'
      security:
      - AuthorizationToken: []
      summary: Get User Conversations
      tags:
      - Conversation
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Fetches user details by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.SuccessBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.FailureBody'
      security:
      - AuthorizationToken: []
      summary: Get User Details
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Updates user details by user ID. Only the provided fields will
        be updated.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateUserSchema'
      produces:
      - application/json
      responses:
        "200":
          description: User details updated successfully
          schema:
            $ref: '#/definitions/responses.SuccessBody'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.FailureBody'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.FailureBody'
      security:
      - AuthorizationToken: []
      summary: Update User Details
      tags:
      - User
securityDefinitions:
  AuthorizationToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
